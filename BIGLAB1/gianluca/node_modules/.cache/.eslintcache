[{"/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/index.js":"1","/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/App.js":"2","/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/reportWebVitals.js":"3","/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/TaskComponents.js":"4","/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/FilterComponents.js":"5","/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/MainNav.js":"6","/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/data.js":"7"},{"size":500,"mtime":1618571515980,"results":"8","hashOfConfig":"9"},{"size":1075,"mtime":1618743512390,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1618571515980,"results":"11","hashOfConfig":"9"},{"size":3277,"mtime":1618745093750,"results":"12","hashOfConfig":"9"},{"size":489,"mtime":1618571515980,"results":"13","hashOfConfig":"9"},{"size":1330,"mtime":1618744729180,"results":"14","hashOfConfig":"9"},{"size":641,"mtime":1618571515980,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1k722ge",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/index.js",[],"/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/App.js",[],"/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/reportWebVitals.js",[],"/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/TaskComponents.js",["31","32"],"import ListGroup from 'react-bootstrap/ListGroup';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nimport PeopleFill from 'react-bootstrap-icons/dist/icons/people-fill';\nimport ThreeDotsVertical from 'react-bootstrap-icons/dist/icons/three-dots-vertical';\nimport Trash2Fill from 'react-bootstrap-icons/dist/icons/trash2-fill';\nimport PencilSquare from 'react-bootstrap-icons/dist/icons/pencil-square';\n\nimport { tasks } from './data';\n\nimport React, {useState} from 'react';\n\nfunction Task(props) {\n    return (\n        <ListGroup.Item className=\"d-flex align-items-center\">\n            <Col as=\"span\" className={props.isUrgent && \"text-danger font-weight-bold\"}>\n                <Form.Check\n                    custom\n                    type=\"checkbox\"\n                    id={\"custom-checkbox-\" + props.id}\n                    label={props.description}\n                />\n            </Col>\n            <Col as=\"span\" className=\"text-dark text-center\">{props.isPrivate && <PeopleFill />}</Col>\n            <Col as=\"span\" className=\"font-075 text-right d-flex justify-content-end\"><span>{props.date}</span><TaskControls /></Col>\n        </ListGroup.Item>\n    );\n}\n\nfunction TaskControls() {\n    const CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\n        <a\n            href=\"\"\n            ref={ref}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        >\n            {children}\n        </a>\n    ));\n\n    // forwardRef again here!\n    // Dropdown needs access to the DOM of the Menu to measure it\n    const CustomMenu = React.forwardRef(\n        ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\n            const [value, setValue] = useState('');\n\n            return (\n                <div\n                    ref={ref}\n                    style={style}\n                    className={className}\n                    aria-labelledby={labeledBy}\n                >\n                    <ul className=\"list-unstyled m-0\">\n                        {React.Children.toArray(children).filter(\n                            (child) =>\n                                !value || child.props.children.toLowerCase().startsWith(value),\n                        )}\n                    </ul>\n                </div>\n            );\n        },\n    );\n    return (\n        <Dropdown className=\"d-inline ml-2\">\n            <Dropdown.Toggle as={CustomToggle} id=\"dropdown-custom-components\">\n                <ThreeDotsVertical color=\"\" size={18} />\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu className=\"min-width-5\" as={CustomMenu}>\n                <Dropdown.Item className=\"px-3\" href=\"#/action-1\"><PencilSquare className=\"mr-3\" size={16}/>Edit</Dropdown.Item>\n                <Dropdown.Item className=\"px-3\" href=\"#/action-2\"><Trash2Fill className=\"mr-3\" size={16}/>Delete</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\nfunction TaskList() {\n    const taskList = tasks.map(task => <Task key={task.id} {...task} />);\n    return (\n        <ListGroup variant=\"flush\" className=\"margin-b-75\">\n            {taskList}\n        </ListGroup>\n    );\n}\n\nexport default TaskList;","/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/FilterComponents.js",[],"/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/MainNav.js",[],"/home/alle/POLITO/AW1/AW1-labs/BIGLAB1/gianluca/src/data.js",[],{"ruleId":"33","severity":1,"message":"34","line":34,"column":9,"nodeType":"35","endLine":41,"endColumn":10},{"ruleId":"36","severity":1,"message":"37","line":50,"column":27,"nodeType":"38","messageId":"39","endLine":50,"endColumn":35},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'setValue' is assigned a value but never used.","Identifier","unusedVar"]